Link: https://adbgeethikaapp.azurewebsites.net/

1) To run Queries with Restriction:<br>
<p>
   <form action="/displaydata" method="get">
     Magnitude Range from<input type="text" name="rangefrom1" maxlength="200" width="60"> <br/>
      Magnitude Range To<input type="text" name="rangeto1" maxlength="200" width="60"><br/>
     Number of queries to run:<input type="text" name="num1" maxlength="200" width="60"></br>
     <input type="submit" value="Time to run queries without Cache"><br/><br/>
  </form>
  </p>

def disdata(rangefrom1=None,rangeto1=None,num1=None):
    dbconn = pypyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(num1)):
        mag= round(random.uniform(rangefrom1, rangeto1),1)
        success="SELECT * from edata where mag>'"+str(mag)+"'"
        cursor.execute(success)
        rows = cursor.fetchall()
    end = time.time()
    exectime = end - start
    return render_template('count.html', t=exectime,ci=rows)

@app.route('/displaydata', methods=['GET'])
def display():
    rangefrom1 = float(request.args.get('rangefrom1',''))
    rangeto1 = float(request.args.get('rangeto1',''))
    num1 = request.args.get('num1','')
    return disdata(rangefrom1,rangeto1,num1) 

<p>
{% block content %}
<h1>Time to run Queries</h1>
  <p><b>{{t}}</b> </p>
 {% endblock %}
</p>

2)  To run Queries with Restriction:<br>

<p>
   <form action="/multiplerun" method="get">
     Magnitude Range from<input type="text" name="rangefrom" maxlength="200" width="60"> <br/>
      Magnitude Range To<input type="text" name="rangeto" maxlength="200" width="60"><br/>
     Number of queries to run:<input type="text" name="num" maxlength="200" width="60"></br>
     <input type="submit" value="Time to run queries with Cache"><br/><br/>
  </form>
  </p><hr>

   
def randrange(rangefrom=None,rangeto=None,num=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    #dbconn = pypyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(num)):
        mag= round(random.uniform(rangefrom, rangeto),1)
        success="SELECT * from edata where mag>'"+str(mag)+"'"
        hash = hashlib.sha224(success.encode('utf-8')).hexdigest()
        key = "redis_cache:" + hash
        if (r.get(key)):
           print("redis cached")
        else:
           # Do MySQL query   
           cursor.execute(success)
           data = cursor.fetchall()
           rows = []
           for j in data:
                rows.append(str(j))  
           # Put data into cache for 1 hour
           r.set(key, pickle.dumps(list(rows)) )
           r.expire(key, 36)
        cursor.execute(success)
    end = time.time()
    exectime = end - start
    return render_template('count.html', t=exectime)

@app.route('/multiplerun', methods=['GET'])
def randquery():
    rangefrom = float(request.args.get('rangefrom',''))
    rangeto = float(request.args.get('rangeto',''))
    num = request.args.get('num','')
    return randrange(rangefrom,rangeto,num) 

<p>
{% block content %}
<h1>Time to run Queries</h1>
  <p><b>{{t}}</b> </p>
 {% endblock %}
</p>

3)  To run Queries without Restriction: (Delete and Select Operation) <br>
  <p>
   <form action="/ddata" method="get">
     Number of queries to run:<input type="text" name="num2" maxlength="200" width="60"></br>
     <input type="submit" value="Time to Run queries without Cache"><br/><br/>
  </form>
  </p>

def datad(num2=None):
    dbconn = pypyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(num2)):
        success2="Delete top(2)PERCENT from edata COMMIT;"
        cursor.execute(success2)
        success="SELECT count(*) from edata;"
        cursor.execute(success)
        rows = cursor.fetchall()
        end = time.time()   
    exectime = end - start
    return render_template('count2.html', t=exectime,r=rows)

@app.route('/ddata', methods=['GET'])
def displayd():
    num2 = request.args.get('num2','')
    return datad(num2) 

{% block content %}
{% for city in r %}
  
<p>Successfully deleted  2% of the existing rows</p>
<p>Total rows after deletion: {{city}}</p>

{% endfor %}
{% endblock %}

4)  To run Queries without Restriction: (Delete and Select Operation) <br>
<p>
   <form action="/mdata" method="get">
     Number of queries to run:<input type="text" name="num3" maxlength="200" width="60"></br>
     <input type="submit" value="Time to Run queries with Cache"><br/><br/>
  </form>
  </p>
def rrange(num3=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    #dbconn = pypyodbc.connect('DRIVER='+driver+';SERVER='+server+';PORT=1433;DATABASE='+database+';UID='+username+';PWD='+ password)
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(num3)):
        success2="Delete top(2)PERCENT from edata COMMIT;"
        cursor.execute(success2)
        success="SELECT count(*)  from edata;"
        hash = hashlib.sha224(success.encode('utf-8')).hexdigest()
        key = "redis_cache:" + hash
        if (r.get(key)):
           print("redis cached")
           rows=[]
        else:
           # Do MySQL query   
           cursor.execute(success)
           data = cursor.fetchall()
           rows = []
           for j in data:
                rows.append(str(j))  
           # Put data into cache for 1 hour
           r.set(key, pickle.dumps(list(rows)) )
           r.expire(key, 36)
        cursor.execute(success)    
    end = time.time()
    exectime = end - start
    return render_template('count2.html', t=exectime,r=rows)

@app.route('/mdata', methods=['GET'])
def rquery():
    num3 = request.args.get('num3','')
    return rrange(num3) 

{% block content %}
{% for city in r %}
  
<p>Successfully deleted  2% of the existing rows</p>
<p>Total rows after deletion: {{city}}</p>

{% endfor %}
{% endblock %}