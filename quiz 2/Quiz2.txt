
Name:Geethika Lingamaneni
Last 4 digits ID:3466

CSE 6331, Cloud Computing					

Quiz Q2, 8.10, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     _________L________

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

  5. Show a web page and interface (which resides on the cloud provider) with your name,
     and below that, Student ID at the top of every web page dispayed 
     (for this quiz). 
     Below that please show the picture "s.jpg".
     Please use a large font.
    
     The cloud service provider is either IBM Cloud (BlueMix) or Microsoft Azure.

     On that same page, please show the total number of earthquakes ("quakes") in the data set, 
     and give (location and id) the one with the greatest "depth" (largest "depth" value).

<img src="static/images/c.png" alt="" width="120" height="120"/>
<h2>Geethika Lingamaneni</h2><br>

<h2>ID: 1001743466</h2>

<p>
    <form action="/largest5" method="post">
        Search for total number of earthquakes and the largest of all  <input type="submit" value="Search">
    </form>
</p>

def largest():
    # connect to DB2
    db2conn = ibm_db.connect("DATABASE="+db2cred['db']+";HOSTNAME="+db2cred['hostname']+";PORT="+str(db2cred['port'])+";UID="+db2cred['username']+";PWD="+db2cred['password']+";","","")
    if db2conn:
        # we have a Db2 connection, query the database
        sql1='Select count(*)  from QUAKES '
        stmt1 = ibm_db.prepare(db2conn,sql1)
        ibm_db.execute(stmt1)
        rows1=[]
        result1 = ibm_db.fetch_assoc(stmt1)
        while result1 != False:
            rows1.append(result1.copy())
            result1 = ibm_db.fetch_assoc(stmt1)
        sql2='Select  * from QUAKES where "depth" is not NULL order by "depth" DESC limit 1'
        stmt2 = ibm_db.prepare(db2conn,sql2)
        ibm_db.execute(stmt2)
        rows2=[]
        result2 = ibm_db.fetch_assoc(stmt2)
        while result2 != False:
            rows2.append(result2.copy())
            result2 = ibm_db.fetch_assoc(stmt2)
        ibm_db.close(db2conn)
    return render_template('first.html',r=rows1,l=rows2)
    
@app.route('/largest5', methods=['POST'])
def large():
    return largest()



  

  6. (Web page) Allow a user to give two location (pair) values (lat and long for two different locations) 
     and a value V, then: display the total number of quakes within that (bounding) box and after that
     set the depth of all quakes within that (bounding) box to the value V.


<p>
    <form action="/latlon" method="GET">
        <b> latitude1 </b><input type="text" name="lat1" maxlength="200" width="60"> </br>
        <b> latitude2</b> <input type="text" name="lat2" maxlength="200" width="60"> </br>
        <b> longitude1 </b><input type="text"  name="lon1" maxlength="200" width="60"> </br>
        <b> longitude2</b> <input type="text"  name="lon2" maxlength="200" width="60"> </br>
        <b> V Value</b> <input type="text"  name="value" maxlength="200" width="60"> </br>
     
       <input type="submit" value="Search">
    </form>
</p>
def lonlat(lat1=None,lat2=None,lon1=None,lon2=None,value=None):
    # connect to DB2
    db2conn = ibm_db.connect("DATABASE="+db2cred['db']+";HOSTNAME="+db2cred['hostname']+";PORT="+str(db2cred['port'])+";UID="+db2cred['username']+";PWD="+db2cred['password']+";","","")
    if db2conn:
        # we have a Db2 connection, query the database
       
        sql='select count(*) from QUAKES where "mag" NOTNULL and ( "latitude" BETWEEN ? AND ?) and ("longitude" between ? and ?)'
        #Note that for security reasons we are preparing the statement first,
        # then bind the form input as value to the statement to replace the
        # parameter marker.
        stmt = ibm_db.prepare(db2conn,sql)
        ibm_db.bind_param(stmt, 1, lat1)
        ibm_db.bind_param(stmt, 2, lat2)
        ibm_db.bind_param(stmt, 3, lon1)
        ibm_db.bind_param(stmt, 4, lon2)
        ibm_db.execute(stmt)
        rows=[]
        # fetch the result
        result = ibm_db.fetch_assoc(stmt)
        while result != False:
            rows.append(result.copy())
            result = ibm_db.fetch_assoc(stmt)
        # close database connection
        sql1='UPDATE QUAKES set "depth"=? from( select * from QUAKES where "mag" NOTNULL and ( "latitude" BETWEEN ? AND ?) and ("longitude" between ? and ?))'
        stmt1 = ibm_db.prepare(db2conn,sql1)
        ibm_db.bind_param(stmt1, 5, value)
        ibm_db.close(db2conn)
        print(rows)
    return render_template('latlon.html', r=rows)

    
@app.route('/latlon', methods=['GET'])
def lat():
    lat1 = request.args.get('lat1', '')
    lat2 = request.args.get('lat2', '')
    lon1 = request.args.get('lon1', '')
    lon2 = request.args.get('lon2', '')
    val =  request.args.get('value', '')
    return lonlat(lat1,lat2,lon1,lon2,val)






  7. (Web page), allow a user to give a partial location name (for example "Tonopah" or "Nevada") and 
     a minimum magnitude ("mag", for example for min mag of 4.00), so quakes with "Tonopah" or "Nevada",
     with mag greater than 4.00) display the 10 oldest in the data set.
     For each quake, please display the lat, long, mag, place, depth and date.


def place(location=None):
    db2conn = ibm_db.connect("DATABASE="+db2cred['db']+";HOSTNAME="+db2cred['hostname']+";PORT="+str(db2cred['port'])+";UID="+db2cred['username']+";PWD="+db2cred['password']+";","","")
    if db2conn:
        # we have a Db2 connection, query the database
        place1='%'+location
        sql='SELECT * FROM EARTHQ WHERE "place" like ? and "mag">=4 order by "time" ASC limit 10'
        # Note that for security reasons we are preparing the statement first,
        # then bind the form input as value to the statement to replace the
        # parameter marker.
        stmt = ibm_db.prepare(db2conn,sql)
        ibm_db.bind_param(stmt, 1, place1)
        ibm_db.execute(stmt)
        rows=[]
        # fetch the result
        result = ibm_db.fetch_assoc(stmt)
        while result != False:
            rows.append(result.copy())
            result = ibm_db.fetch_assoc(stmt)
        # close database connection
        ibm_db.close(db2conn)
    return render_template('location.html',r=rows)


 
@app.route('/locationame', methods=['GET'])
def loc():
    location = request.args.get('location', '')
    return place(location)


  8. (Web page), allow a user to give a part of a location name (for example "Mina" or "Nevada") 
     and a distance (for example 250 km), and show the largest magnitude quake (if one exists),
     within that distance.
     Please display the lat, long, mag, place, depth and date.
     Then allow the user to change the location name.




def eight(place=None,dis=None):
    # connect to DB2
    db2conn = ibm_db.connect("DATABASE="+db2cred['db']+";HOSTNAME="+db2cred['hostname']+";PORT="+str(db2cred['port'])+";UID="+db2cred['username']+";PWD="+db2cred['password']+";","","")
    if db2conn:
        # we have a Db2 connection, query the database
        place1 = '%'+place
        dis1 = dis+' km%'
        print(place1)
        sql='select "latitude","longitude","mag","depth","time" from QUAKES where "place" like ? and "place" like ? order by "mag" desc limit 1' 
        #Note that for security reasons we are preparing the statement first,
        # then bind the form input as value to the statement to replace the
        # parameter marker.
        stmt = ibm_db.prepare(db2conn,sql)
        ibm_db.bind_param(stmt, 1, place1)
        ibm_db.bind_param(stmt, 2, dis1)
        ibm_db.execute(stmt)
        rows=[]
        # fetch the result
        result = ibm_db.fetch_assoc(stmt)
        while result != False:
            rows.append(result.copy())
            result = ibm_db.fetch_assoc(stmt)
        # close database connection
        ibm_db.close(db2conn)
        print(rows)
    return render_template('place.html', r=rows)

@app.route('/8th', methods=['GET'])
def 8():
    place = request.args.get('place', '')
    dis = request.args.get('dis', '')
    return eight(place,dis)

  9. Show us, in a link, the application running and we will try it out. Only for parts 5, 6, 7, 8

  10. When complete, return (send) this quiz
      If you finish early, send this immediately, otherwise send between
      the end of class and no more than 1 minute after that.

