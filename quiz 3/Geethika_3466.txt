
Name:Geethika Lingamaneni
Last 4 digits ID:3466

CSE 6331, Cloud Computing					


Quiz Q3, 8.10, Summer 2020   (c) DL, UTA, 2020


  C&P means cut and paste only those relevant lines from your program(s) into this quiz.


 1.  I understand that I am on my honor during this quiz, I will not collaborate, use 
     non-allowed sources, and I will not discuss or share this quiz with anyone for the next 
     12 hours.
     You MAY: use Google to search, use previous source code, 
     YOU MAY NOT use:
     Email, Facebook, Hangouts, IM, chats, Skype or ANY other human connection.

     This is a timed test. Late tests will have points deducted for being late.
     Very late tests will not be graded.

     When you are complete, with any part, please send the link, raise your hand, so we may visually inspect that part.

     The second part of the test, you should electronically submit, you will need to copy and paste 
     only those lines of code to implement that part of the test, usually a few (two to eight) lines of code. 
     Place it immediately after the question.

     Submit this Quiz (renamed) with code cut and pasted, ONLY text. DO NOT submit zips, binaries, libraries,
     or anything other than text.

     When any parts(questions) are complete complete, submit this test, you may make multiple submissions.

     If you have computer, or other, problems, please raise your hand immediately.

     If you understand and agree, please initial here:
     ___________L______

 2. Get files from this same folder.
   
 3. Name your program/submission with your name and last digits of your ID.

 4a. Using the cloud services provider, all functionality possible should be implemented on that provider.
     (Of course, displaying web pages through a browser and the user interface is "local")

 4b. Upload all data files (*jpg and *csv, not this quiz) to cloud service. 
  
Show and submit code, when each part is complete, raise your hand and then show us:

 To recieve credit you MUST show (demo) AND submit the code (text only) on Canvas.

 5. Show a web page and interface (which resides on the cloud provider) with your student ID,
    and below that your name, last name first, then first name.
    For all questions after this one, please show on the top of each page. 
    Please use a large font.
    The cloud service provider is either MS Azure or IBM Cloud (BlueMix).

 6. Import the datasets into a Relational Data Base (SQL), if you have already done this, (briefly) explain/describe
    how you did this. Please note that for some parts of the following you will need to create indexes (keys)
    appropriately.

I imported using ssms and sql server



 7. Allow a user, through a web form, to give a country code and you will list all of the terrorist incidents (ti) in that
    country by year, number of incidents, and the full name of the country.
    Please show the time to do this query.


def q7(code=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    cursor.execute("SELECT  ti.entity,ti.year, ti.NumberTerroristIncidents from sp join ti on sp.code=ti.code where sp.code='"+str(code)+"'")
    rows1 = cursor.fetchall()
    end = time.time()
    exectime = end - start
    return render_template('seventh.html',r=rows1,t=exectime)


@app.route('/seventh', methods=['GET'])
def ques7():
    code = request.args.get('code', '')
    return q7(code)


 8. Allow a user, through a web form, to give a range of years, and you will list all of the terrorist incidents in 
    all countries by year, number of incidents, and the full name of each country.
    Please show the time to do this query.

def q8(val1=None,val2=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    cursor.execute("SELECT  ti.entity,ti.year, ti.NumberTerroristIncidents from sp join ti on sp.code=ti.code and sp.year BETWEEN '"+str(val1)+"' AND '"+str(val2)+"'")
    rows1 = cursor.fetchall()
    end = time.time()
    exectime = end - start
    return render_template('eight.html',r=rows1,t=exectime)


@app.route('/eighth', methods=['GET'])
def ques8():
    val1 = request.args.get('val1', '')
    val2 = request.args.get('val2', '')
    return q8(val1,val2)


 9. Allow a user, through a web form, to give a range of percent smokers (sp), and you will count all of the terrorist 
    incidents in all countries, within that range of smokers. Please show the names of all countries that have any incidents,
    within that percent range.
    Please show the time to do this query.
def q9(va1=None,va2=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    cursor.execute("SELECT count(ti.NumberTerroristIncidents) from ti join sp on sp.code=ti.code where sp.prevalence BETWEEN '"+str(va1)+"' AND '"+str(va2)+"'")
    rows1 = cursor.fetchall()
    cursor.execute("Select ti.entity,ti.year,ti.NumberTerroristIncidents from ti join sp on sp.code=ti.code where sp.prevalence BETWEEN '"+str(va1)+"' AND '"+str(va2)+"'")
    rows2 = cursor.fetchall()
    end = time.time()
    exectime = end - start
    return render_template('nine.html',r=rows1,l=rows2,t=exectime)


@app.route('/nine', methods=['GET'])
def ques9():
    va1 = request.args.get('va1', '')
    va2 = request.args.get('va2', '')
    return q9(va1,va2)


 10. A user will give you the number of times to do the "query", you will do the previous steps 8. and 9. that number of times 
     and show the results as well as the total time taken. 
def q108(val1=None,val2=None,num2=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(num2)):
      cursor.execute("SELECT  ti.entity,ti.year, ti.NumberTerroristIncidents from sp join ti on sp.code=ti.code and sp.year BETWEEN '"+str(val1)+"' AND '"+str(val2)+"'")
      rows1 = cursor.fetchall()
    end = time.time()
    exectime = end - start
    return render_template('eight.html',r=rows1,t=exectime)


@app.route('/tena', methods=['GET'])
def ques108():
    val1 = request.args.get('val1', '')
    val2 = request.args.get('val2', '')
    num2 = request.args.get('num2', '')
    return q108(val1,val2,num2)





def q109(va3=None,va4=None,numa=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(numa)):
      cursor.execute("SELECT count(ti.NumberTerroristIncidents) from ti join sp on sp.code=ti.code where sp.prevalence BETWEEN '"+str(va3)+"' AND '"+str(va4)+"'")
      rows1 = cursor.fetchall()
      cursor.execute("Select ti.entity,ti.year,ti.NumberTerroristIncidents from ti join sp on sp.code=ti.code where sp.prevalence BETWEEN '"+str(va3)+"' AND '"+str(va4)+"'")
      rows2 = cursor.fetchall()
    end = time.time()
    exectime = end - start
    return render_template('nine.html',r=rows1,l=rows2,t=exectime)


@app.route('/ninea', methods=['GET'])
def ques109():
    va3 = request.args.get('va3', '')
    va4 = request.args.get('va4', '')
    numa = request.args.get('numa', '')
    return q109(va3,va4,numa)


 11. Repeat 10. using an in-memory caching mechanism (NOT an in-memory database) repeat the previous step, then show us.
def q118(value1=None,value2=None,num3=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(num3)):
      success=("SELECT  ti.entity,ti.year, ti.NumberTerroristIncidents from sp join ti on sp.code=ti.code and sp.year BETWEEN '"+str(value1)+"' AND '"+str(value2)+"'")
      hash = hashlib.sha224(success.encode('utf-8')).hexdigest()
      key = "redis_cache:" + hash
      if (r.get(key)):
           print("redis cached")
      else:
           # Do MySQL query   
           cursor.execute(success)
           data = cursor.fetchall()
           rows1 = []
           for j in data:
                rows1.append(str(j))  
           # Put data into cache for 1 hour
           r.set(key, pickle.dumps(list(rows1)) )
           r.expire(key, 36)

    end = time.time()
    exectime = end - start
    return render_template('eight.html',r=rows1,t=exectime)


@app.route('/elevena', methods=['GET'])
def ques118():
    value1 = request.args.get('value1', '')
    value2 = request.args.get('value2', '')
    num3 = request.args.get('num3', '')
    return q118(value1,value2,num3)



def q119(va5=None,va6=None,numb=None):
    dbconn =pypyodbc.connect('Driver={ODBC Driver 17 for SQL Server};Server=tcp:geethikasqlserver.database.windows.net,1433;Database=adbdb;Uid=geethika;Pwd=Lin@2598;Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30')
    cursor = dbconn.cursor()
    start = time.time()
    for i in range(0,int(numb)):
      success1=("SELECT count(ti.NumberTerroristIncidents) from ti join sp on sp.code=ti.code where sp.prevalence BETWEEN '"+str(va5)+"' AND '"+str(va6)+"'")
      rows1 = cursor.fetchone()
      success=("Select ti.entity,ti.year,ti.NumberTerroristIncidents from ti join sp on sp.code=ti.code where sp.prevalence BETWEEN '"+str(va5)+"' AND '"+str(va6)+"'")
      hash = hashlib.sha224(success.encode('utf-8')).hexdigest()
      key = "redis_cache:" + hash
      if (r.get(key)):
           print("redis cached")
      else:
           # Do MySQL query   
           cursor.execute(success)
           data = cursor.fetchall()
           rows2 = []
           for j in data:
                rows2.append(str(j))  
           # Put data into cache for 1 hour
           r.set(key, pickle.dumps(list(rows2)) )
           r.expire(key, 36)
    cursor.execute(success)
    end = time.time()
    exectime = end - start
    return render_template('nine.html',r=rows1,l=rows2,t=exectime)


@app.route('/nineb', methods=['GET'])
def ques119():
    va5 = request.args.get('va5', '')
    va6 = request.args.get('va6', '')
    numb = request.args.get('numb', '')
    return q119(va5,va6,numb)


 12a. Show us, in a link, the application running and we will try it out. Only for parts 7, 8, 9, 10, 11

https://quiz3geethika.azurewebsites.net/

 12b. When complete, return (send) this quiz
     If you finish early, send this immediately, otherwise send between
     the end of class and no more than 1 minute after that.

